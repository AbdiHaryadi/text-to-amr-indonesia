Function Convert_linearized_penman_to_tree(linearized_penman):
    input   : String linearized PENMAN representation of an AMR from output function LinearizePenmanInput [linearized_penman]
    output  : Root of a tree,
              Adjacency list of a tree,

    splitted_linearized_penman <- Split_and_handle_duplicate_nodes_in_linearized_penman(linearized_penman)

    adj_list <- defaultdict(list)
    stack <- []
    set_visited_node <- set()
    root <- None

    curr_edge <- None

    for each item in splitted_linearized_penman do
        if (item[0]==':') then // edge
            curr_edge = item
        else if (item==')') then
            if (len(stack)>0) then
                stack.pop()
        else if (item=='(') then
            continue // do nothing
        else // node
            if (stack.length != 0) then
                top_stack <- stack[-1]
                if (item in set_visited_node) then
                    continue

                adj_list[top_stack].append((curr_edge, item))
                stack.append(item)
                set_visited_node.add(item)
            else
                root <- item
                stack.append(item)  
                set_visited_node.add(item)
    return root, adj_list

EndFunction

Function Split_and_handle_duplicate_nodes_in_linearized_penman(linearized_penman):
    input   : String linearized PENMAN representation of an AMR from output function LinearizePenmanInput [linearized_penman]
    output  : List of token with id from linearized_penman

    splitted_linearized_penman <- linearized_penman.split()
    map_node_id <- defaultdict(lambda: 0)
    for i = 0 to splitted_linearized_penman.length do
        item <- splitted_linearized_penman[i]
        if (item != '(' and item != ')' and ':' not in item) then // node
            node_with_id <- item + '-' + str(map_node_id[item])
            map_node_id[item] <- map_node_id[item] + 1
            splitted_linearized_penman[i] <- node_with_id      
    return splitted_linearized_penman

EndFunction